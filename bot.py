import discord
from discord.ext import commands
import os
from dotenv import load_dotenv
import aiosqlite
import asyncio

async def init_db():
    async with aiosqlite.connect("studio.db") as db:
        await db.execute("""
            -- tasks: –æ—Å–Ω–æ–≤–Ω–∞—è –∫–∞—Ä—Ç–æ—á–∫–∞ –∑–∞–¥–∞—á–∏
            CREATE TABLE IF NOT EXISTS tasks (
              id INTEGER PRIMARY KEY AUTOINCREMENT,
              title TEXT,
              scene TEXT,
              assignee_id INTEGER,
              creator_id INTEGER,
              deadline TEXT,        -- ISO string
              status TEXT,          -- open, in_progress, submitted, in_review, approved, rejected
              created_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP
            );
            
        """)
        await db.execute("""
                        
            -- checklist items (–æ–ø—Ü–∏–æ–Ω–∞–ª—å–Ω–æ)
            CREATE TABLE IF NOT EXISTS checklist (
              id INTEGER PRIMARY KEY AUTOINCREMENT,
              task_id INTEGER,
              title TEXT,
              done INTEGER DEFAULT 0
            );
            """)
        await db.execute("""
                        -- submissions: —Å—Å—ã–ª–∫–∏ –Ω–∞ –∑–∞–≥—Ä—É–∂–µ–Ω–Ω—ã–µ —Ñ–∞–π–ª—ã
            CREATE TABLE IF NOT EXISTS submissions (
              id INTEGER PRIMARY KEY AUTOINCREMENT,
              task_id INTEGER,
              user_id INTEGER,
              filename TEXT,
              filepath TEXT,        -- –ª–æ–∫–∞–ª—å–Ω—ã–π –ø—É—Ç—å –∏–ª–∏ S3 URL
              created_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP,
              status TEXT DEFAULT 'submitted'
            );
            """)
        await db.execute("""
                        
            -- audit / –ª–æ–≥
            CREATE TABLE IF NOT EXISTS audit (
              id INTEGER PRIMARY KEY AUTOINCREMENT,
              task_id INTEGER,
              actor_id INTEGER,
              action TEXT,
              details TEXT,
              created_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP
            );
            """)
        await db.commit()

asyncio.run(init_db())

UPLOAD_FOLDER = os.path.join(os.getcwd(), "files")

# –ø—Ä–∏–º–µ—Ä —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è —Ñ–∞–π–ª–∞
# file = await attachment.to_file()
# await file.save(os.path.join(UPLOAD_FOLDER, attachment.filename))

load_dotenv()

GUILD_ID = int(os.getenv("GUILD_ID"))
SUBMISSIONS_CHANNEL_ID = int(os.getenv("SUBMISSIONS_CHANNEL_ID"))
TASKS_CHANNEL_ID = int(os.getenv("TASKS_CHANNEL_ID"))
REPORTS_CHANNEL_ID = int(os.getenv("REPORTS_CHANNEL_ID"))

intents = discord.Intents.default()
intents.message_content = True

bot = commands.Bot(command_prefix="!", intents=intents)

@bot.event
async def on_ready():
    print(f"–ë–æ—Ç {bot.user} –∑–∞–ø—É—â–µ–Ω –∏ –≥–æ—Ç–æ–≤!")

@bot.command(name="–¥–æ–±–∞–≤–∏—Ç—å_–∑–∞–¥–∞—á—É")
async def add_task(ctx, scene: str, *, title: str):
    """
    –î–æ–±–∞–≤–ª—è–µ—Ç –Ω–æ–≤—É—é –∑–∞–¥–∞—á—É –≤ –±–∞–∑—É.
    –ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ: !–¥–æ–±–∞–≤–∏—Ç—å_–∑–∞–¥–∞—á—É –°—Ü–µ–Ω–∞3 –°–¥–µ–ª–∞—Ç—å –∞–Ω–∏–º–∞—Ç–∏–∫ —Å—Ü–µ–Ω—ã
    """
    creator_id = ctx.author.id
    status = "open"
    deadline = None  # –ø–æ–∫–∞ –±–µ–∑ —Å—Ä–æ–∫–∞
    assignee_id = None  # –ø–æ–∫–∞ –Ω–µ –Ω–∞–∑–Ω–∞—á–µ–Ω

    async with aiosqlite.connect("studio.db") as db:  # –∞—Å–∏–Ω—Ö—Ä–æ–Ω–Ω–æ–µ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ
        await db.execute(
            """
            INSERT INTO tasks (title, scene, assignee_id, creator_id, deadline, status)
            VALUES (?, ?, ?, ?, ?, ?)
            """,
            (title, scene, assignee_id, creator_id, deadline, status)
        )
        await db.commit()  # –∫–æ–º–º–∏—Ç –≤–Ω—É—Ç—Ä–∏ async

    await ctx.send(f"‚úÖ –ó–∞–¥–∞—á–∞ '{title}' –¥–ª—è {scene} –¥–æ–±–∞–≤–ª–µ–Ω–∞ –≤ –±–∞–∑—É!")

@bot.command(name="–ø–æ–¥–∞—Ç—å")
async def submit(ctx, task_id: int):
    """
    –û—Ç–ø—Ä–∞–≤–∫–∞ —Ñ–∞–π–ª–∞ –≤ –∫–∞—á–µ—Å—Ç–≤–µ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞ –ø–æ –∑–∞–¥–∞—á–µ.
    –ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ: !submit 3 (–∏ –ø—Ä–∏–∫—Ä–µ–ø–∏—Ç—å —Ñ–∞–π–ª)
    """
    if not ctx.message.attachments:
        await ctx.send("‚ùå –ù—É–∂–Ω–æ –ø—Ä–∏–∫—Ä–µ–ø–∏—Ç—å —Ñ–∞–π–ª –∫ —Å–æ–æ–±—â–µ–Ω–∏—é!")
        return

    attachment = ctx.message.attachments[0]  # –±–µ—Ä—ë–º –ø–µ—Ä–≤—ã–π –ø—Ä–∏–∫—Ä–µ–ø–ª—ë–Ω–Ω—ã–π —Ñ–∞–π–ª
    filename = attachment.filename
    filepath = f"submissions/{filename}"  # —Å–æ—Ö—Ä–∞–Ω–∏–º –ª–æ–∫–∞–ª—å–Ω–æ –≤ –ø–∞–ø–∫—É submissions

    # —Å–æ—Ö—Ä–∞–Ω—è–µ–º —Ñ–∞–π–ª –Ω–∞ –¥–∏—Å–∫
    await attachment.save(filepath)

    # –¥–∞–Ω–Ω—ã–µ –¥–ª—è –∑–∞–ø–∏—Å–∏ –≤ –ë–î
    user_id = ctx.author.id
    status = "submitted"

    async with aiosqlite.connect("studio.db") as db:
        await db.execute("""
            INSERT INTO submissions (task_id, user_id, filename, filepath, status)
            VALUES (?, ?, ?, ?, ?)
        """, (task_id, user_id, filename, filepath, status))
        await db.commit()

    await ctx.send(f"‚úÖ –§–∞–π–ª **{filename}** –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω –¥–ª—è –∑–∞–¥–∞—á–∏ #{task_id}")

@bot.command(name="approve")
async def approve(ctx, submission_id: int):
    """
    –û–¥–æ–±—Ä—è–µ—Ç —Ä–∞–±–æ—Ç—É (submission).
    –ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ: !approve 5
    """
    async with aiosqlite.connect("studio.db") as db:
        # –ø—Ä–æ–≤–µ—Ä–∏–º, –µ—Å—Ç—å –ª–∏ —Ç–∞–∫–∞—è –∑–∞–ø–∏—Å—å
        cursor = await db.execute("SELECT id, status FROM submissions WHERE id = ?", (submission_id,))
        row = await cursor.fetchone()

        if not row:
            await ctx.send(f"‚ùå –°–∞–±–º–∏—Ç #{submission_id} –Ω–µ –Ω–∞–π–¥–µ–Ω.")
            return

        # –æ–±–Ω–æ–≤–ª—è–µ–º —Å—Ç–∞—Ç—É—Å
        await db.execute("UPDATE submissions SET status = 'approved' WHERE id = ?", (submission_id,))
        await db.commit()

    await ctx.send(f"‚úÖ –°–∞–±–º–∏—Ç #{submission_id} –æ–¥–æ–±—Ä–µ–Ω!")


@bot.command(name="reject")
async def reject(ctx, submission_id: int):
    """
    –û—Ç–∫–ª–æ–Ω—è–µ—Ç —Ä–∞–±–æ—Ç—É (submission).
    –ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ: !reject 5
    """
    async with aiosqlite.connect("studio.db") as db:
        cursor = await db.execute("SELECT id, status FROM submissions WHERE id = ?", (submission_id,))
        row = await cursor.fetchone()

        if not row:
            await ctx.send(f"‚ùå –°–∞–±–º–∏—Ç #{submission_id} –Ω–µ –Ω–∞–π–¥–µ–Ω.")
            return

        await db.execute("UPDATE submissions SET status = 'rejected' WHERE id = ?", (submission_id,))
        await db.commit()

    await ctx.send(f"üö´ –°–∞–±–º–∏—Ç #{submission_id} –æ—Ç–∫–ª–æ–Ω—ë–Ω.")

@bot.command()
async def submit(ctx, *, text):
    await ctx.send(f"{ctx.author.mention} –æ—Ç–ø—Ä–∞–≤–∏–ª –∑–∞–¥–∞—á—É: {text}")

TOKEN = os.getenv("BOT_TOKEN")
bot.run(TOKEN)

print(TOKEN)
print(GUILD_ID)
print(SUBMISSIONS_CHANNEL_ID)